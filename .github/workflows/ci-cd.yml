name: CICD

on:
  push:
    branches:
      - feature

env:
  GCP_REGION: asia-southeast2
  GCP_REPO_NAME: ntx-app-repo
  DOCKER_IMAGE_NAME: ntx-node-app
  APP_NAME: $DOCKER_IMAGE_NAME
  
jobs:
  infra:
    name: Provision GCP Infrastructure
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.NTX_GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.NTX_GCP_SA }}
        export_default_credentials: true

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.6

    - name: Provision Infra With Terraform
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve \
          -var="project_id=${{ secrets.NTX_GCP_PROJECT_ID }}" \
          -var="region=$GCP_REGION" \
          -var="repo_name=$GCP_REPO_NAME" \

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: infra

    steps:
    - uses: actions/checkout@v4

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.NTX_GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.NTX_GCP_SA }}
        export_default_credentials: true

    - name: Authenticate Docker to Artifact Registry
      run: gcloud auth configure-docker $GCP_REGION-docker.pkg.dev

    - name: Build and Push Docker image
      run: |
        IMAGE_URI=$GCP_REGION-docker.pkg.dev/${{ secrets.NTX_GCP_PROJECT_ID }}/$GCP_REPO_NAME/$DOCKER_IMAGE_NAME:latest
        docker build -t $IMAGE_URI ./app
        docker push $IMAGE_URI

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build

    env: IMAGE_URI=$GCP_REGION-docker.pkg.dev/${{ secrets.NTX_GCP_PROJECT_ID }}/$GCP_REPO_NAME/$DOCKER_IMAGE_NAME:latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.NTX_GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.NTX_GCP_SA }}
        export_default_credentials: true

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials autopilot-cluster \
          --region $GCP_REGION --project ${{ secrets.NTX_GCP_PROJECT_ID }}

    - name: Set Image in deployment manifest
      run: |
        sed -i "s|REPLACE_IMAGE|${IMAGE_URI}|g" k8s/deployment.yaml
        sed -i "s|REPLACE_APP|${APP_NAME}|g" k8s/deployment.yaml

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    - name: Wait for External IP
      id: wait_lb
      run: |
        for i in {1..30}; do
          IP=$(kubectl get svc $APP_NAME-service -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "$IP" ]]; then
            echo "LB IP: $IP"
            echo "url=http://$IP" >> $GITHUB_OUTPUT
            break
          fi
          echo "Waiting for LB IP..."
          sleep 10
        done

  curl-test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Test with curl
        run: |
          echo "Hitting deployed app at ${{ needs.deploy.outputs.url }}"
          curl -v --retry 10 --retry-connrefused --retry-delay 5 ${{ needs.deploy.outputs.url }}

  destroy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.NTX_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NTX_GCP_SA }}
          export_default_credentials: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform init
          terraform destroy -auto-approve \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=$GCP_REGION" \
            -var="repo_name=$GCP_REPO_NAME"